using SSHManager.Services.Interfaces;

namespace SSHManager.Services;

public class SshConfigService : ISshConfigService
{
    private readonly IFileService _fileService;

    public SshConfigService(IFileService fileService)
    {
        _fileService = fileService;
    }

    public async Task<bool> UpdateConfigFileAsync(string configPath, string keyName, string sshDirectory)
    {
        try
        {
            var identityFilePath = Path.Combine(sshDirectory, keyName).Replace('\\', '/');
            var configEntry = $@"
# Azure DevOps SSH Configuration (Generated by SSH Key Generator)
Host dev.azure.com
  HostName ssh.dev.azure.com
  User git
  IdentityFile {identityFilePath}
  IdentitiesOnly yes

";

            var existingContent = _fileService.FileExists(configPath) 
                ? await _fileService.ReadTextFileAsync(configPath) 
                : string.Empty;

            string newContent;
            if (existingContent.Contains("Host dev.azure.com"))
            {
                newContent = ReplaceAzureDevOpsConfig(existingContent, configEntry);
            }
            else
            {
                newContent = AppendConfig(existingContent, configEntry);
            }

            await _fileService.WriteTextFileAsync(configPath, newContent);
            return true;
        }
        catch
        {
            return false;
        }
    }

    private static string ReplaceAzureDevOpsConfig(string existingContent, string newConfigEntry)
    {
        var lines = existingContent.Split('\n');
        var newLines = new List<string>();
        bool inAzureDevOpsSection = false;

        foreach (var line in lines)
        {
            if (line.Trim().StartsWith("Host dev.azure.com"))
            {
                inAzureDevOpsSection = true;
                newLines.Add(newConfigEntry.TrimEnd());
                continue;
            }
            
            if (inAzureDevOpsSection && line.Trim().StartsWith("Host ") && 
                !line.Trim().StartsWith("Host dev.azure.com"))
            {
                inAzureDevOpsSection = false;
            }

            if (!inAzureDevOpsSection)
            {
                newLines.Add(line);
            }
        }

        return string.Join('\n', newLines);
    }

    private static string AppendConfig(string existingContent, string configEntry)
    {
        var content = existingContent;
        if (!string.IsNullOrEmpty(content) && !content.EndsWith('\n'))
        {
            content += '\n';
        }
        return content + configEntry;
    }
}